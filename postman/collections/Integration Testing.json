{
	"info": {
		"_postman_id": "dfcbc990-4883-45ec-9b72-46484f34a6de",
		"name": "Integration Testing",
		"description": "# About this collection\n\nPostman allows you to test your APIs using simple Javascript code. You can evaluate your response body, headers, cookies, and more using the [ChaiJS BDD](https://www.chaijs.com/api/bdd/) syntax.\n\nThis collection guides you through the process of setting up an integration test to ensure that all individual components of an API function together seamlessly.\n\nThe API under test in this collection includes three endpoints for registering and receiving a token, accessing your unique generated name, and unregistering a token:\n\n- POST `/register`\n- POST `/unregister`\n- GET `/my-name`\n    \n\nBy setting up requests in the order of the operation, we can test the flow of data to and from the endpoints and ensure they work together as expected. We also verify that the data persists between requests on the back end.\n\n## **Using this collection**\n\n**Step 1:** Check out the requests' documentation to learn more about -\n\n- what each request is meant to do.\n- the tests we've added against each one.\n    \n\n**Step 2:** Run this collection by clicking on \"Run\".\n\n<img src=\"https://content.pstmn.io/84019b0f-69c8-4c5f-98b9-2c90a6f9a0b1/Y29sbGVjdGlvbi1ydW5uZXItYnV0dG9uLmpwZWc=\" width=\"266\" height=\"103\">\n\n**Step 3:** To customize this collection, replace the request URLs with your API endpoints and add or edit the tests if needed.\n\n## Resources\n\n[Scripting in Postman](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n\n[Test script examples](https://learning.postman.com/docs/writing-scripts/script-references/test-examples/)\n\n[Postman Sandbox API reference](https://learning.postman.com/docs/sending-requests/grpc/postman-sandbox-api/#writing-assertions)\n\n[Using the Collection Runner](https://learning.postman.com/docs/collections/running-collections/intro-to-collection-runs/)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "30513862-dfcbc990-4883-45ec-9b72-46484f34a6de"
	},
	"item": [
		{
			"name": "User Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2896f0a5-536f-4108-89d8-5b8472013992",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 409])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0cd14055-9f77-41ee-a28f-cec75d7ca400",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\":\"testUser\",\n    \"phone\":\"0000000000\",\n    \"password\":\"testPass\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register",
						"user"
					]
				},
				"description": "This returns a `token` that you can use to retrieve information later on.\n\nWe have included a test to confirm if a token is returned. We have also added test scripts to copy the token to the `token` collection variable. This makes it easy for us to reuse this token in other requests in the collection."
			},
			"response": []
		},
		{
			"name": "User Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ebeed03e-0e12-4099-9d7a-5733df033732",
						"exec": [
							"var token = pm.response.text();",
							"pm.environment.set(\"user_token\", token);",
							"",
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c3d0c5e6-609e-449b-bf92-a8368235a8b3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testUser\",\n    \"password\": \"testPass\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate/user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate",
						"user"
					]
				},
				"description": "This request uses the saved `token` collection variable to access a secret 'name' stored against that token.\n\nIn this request, we used the `token` collection variable as a query param to fetch the name generated for that token. We have added a test to check that a name is correctly returned."
			},
			"response": []
		},
		{
			"name": "User Send Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad147ebb-ebb3-4eee-aee3-552ae982286e",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "80966e07-04e9-4e6e-82d8-ef2f65aa3ff6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"emergencyLevel\":1,\n     \"emergencyType\": \"medical\",\n     \"latitude\": 11.11,\n     \"longitude\":22.22\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/send_request",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"send_request"
					]
				},
				"description": "This request un-registers a token by using the token collection variable in the POST body.\n\nWe also added a test to ensure the response has a 200 OK status code."
			},
			"response": []
		},
		{
			"name": "User Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf5b0473-2959-41f6-97b2-4fbb48f9c096",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "13930654-1a00-492b-a1ff-721152653aed",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/dispatch-history/search?status=pending",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dispatch-history",
						"search"
					],
					"query": [
						{
							"key": "status",
							"value": "pending"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Responder Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98277044-5bde-4b03-8699-0cf023921645",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 409])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f4e49a2e-3d46-4c0e-a55f-730c4c97a5b6",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"testResponder\",\n    \"phone\":\"1111111111\",\n    \"longitude\": 10.10,\n    \"latitude\": 11.11,\n    \"password\": \"12341234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/register/responder",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"register",
						"responder"
					]
				}
			},
			"response": []
		},
		{
			"name": "Responder Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "603c1317-a7ca-43b3-9e37-9e0768c00447",
						"exec": [
							"var token = pm.response.text();",
							"pm.environment.set(\"responder_token\", token);",
							"",
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "6ff2f19e-3ee7-4341-85f7-83fce057b79a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"testResponder\",\n    \"password\": \"12341234\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/authenticate/responder",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"authenticate",
						"responder"
					]
				}
			},
			"response": []
		},
		{
			"name": "Responder Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b43f89c4-5003-49c2-ba54-16caf9dc69f3",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "64e76714-0b85-4337-a4eb-9dea2c40619a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{responder_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/responder/search",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"responder",
						"search"
					]
				}
			},
			"response": []
		},
		{
			"name": "Responder Accept",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ecc3721a-7683-443f-af43-bdd9331b09f5",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 409])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "cfb2038b-76fc-40dc-b5df-8a36bdbb9e3b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{responder_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/responder/accept/9",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"responder",
						"accept",
						"9"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Rate",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b441cad1-bc3a-4076-bc9d-fb7a86d09895",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 400])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "58b674e0-25be-4cb5-bb25-29c2e6047852",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/dispatch-history/rate?id=9&rating=8",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"dispatch-history",
						"rate"
					],
					"query": [
						{
							"key": "id",
							"value": "9"
						},
						{
							"key": "rating",
							"value": "8"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "User All",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bf1ed823-f4be-4983-9911-f312c5ae6410",
						"exec": [
							"pm.test('Check status code', () => {",
							"    pm.expect(pm.response.code).to.be.oneOf([200])",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "042be2bc-9d48-4c20-8a03-70d07ff73c22",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{user_token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/user/self",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"self"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "79f2c527-61a9-459e-bcda-905bb9873f14",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "cf2ef274-4419-4a2a-af41-7b509e1fac0e",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "f7dd67a6-87ef-4868-958b-82b4d4d2fd5f",
			"key": "baseUrl",
			"value": "http://127.0.0.1:8080"
		},
		{
			"id": "b2df800e-5a45-43f2-98d7-1c7f67d80c03",
			"key": "user_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "0aadaf8d-8b1a-4ee3-aba7-ce5e6e8635b7",
			"key": "responder_token",
			"value": "",
			"type": "string"
		}
	]
}